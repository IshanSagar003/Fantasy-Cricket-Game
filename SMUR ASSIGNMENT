import pandas as pd
import numpy as np
from sklearn import preprocessing
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import jaccard_score, confusion_matrix, classification_report

# Load data
disease_df = pd.read_csv('C:/Users/lenovo/Downloads/framingham.csv')
disease_df.drop(['education'], inplace=True, axis=1)
disease_df.rename(columns={'male': 'Sex_male'}, inplace=True)
disease_df.dropna(axis=0, inplace=True)

# Visualize target variable
plt.figure(figsize=(7, 5))
sns.countplot(x='TenYearCHD', data=disease_df, palette="BuGn_r")
plt.title('Distribution of TenYearCHD')
plt.xlabel('TenYearCHD')
plt.ylabel('Count')
plt.show()

# Plotting the distribution of TenYearCHD
laste = disease_df['TenYearCHD'].plot()
plt.title('Distribution of TenYearCHD')
plt.xlabel('Index')
plt.ylabel('TenYearCHD')
plt.show()

# Preprocessing
X = np.asarray(disease_df[['age', 'Sex_male', 'cigsPerDay', 'totChol', 'sysBP', 'glucose']])
y = np.asarray(disease_df['TenYearCHD'])
X = preprocessing.StandardScaler().fit(X).transform(X)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=4)

# Logistic Regression
logreg = LogisticRegression()
logreg.fit(X_train, y_train)
y_pred_logreg = logreg.predict(X_test)
jaccard_logreg = jaccard_score(y_test, y_pred_logreg)

# Random Forest
rf = RandomForestClassifier()
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)
score_rf = rf.score(X_test, y_test)

# Evaluation
cm_logreg = confusion_matrix(y_test, y_pred_logreg)
conf_matrix_logreg = pd.DataFrame(data=cm_logreg,
                                  columns=['Predicted:0', 'Predicted:1'],
                                  index=['Actual:0', 'Actual:1'])

plt.figure(figsize=(8, 5))
sns.heatmap(conf_matrix_logreg, annot=True, fmt='d', cmap="Greens")
plt.title('Confusion Matrix - Logistic Regression')
plt.xlabel('Predicted label')
plt.ylabel('True label')
plt.show()

print('Logistic Regression:')
print('Jaccard similarity score:', jaccard_logreg)
print(classification_report(y_test, y_pred_logreg))

print('Random Forest:')
print('Accuracy:', score_rf)
print(classification_report(y_test, y_pred_rf))
